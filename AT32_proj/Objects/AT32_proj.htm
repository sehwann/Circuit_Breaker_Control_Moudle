<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\Objects\AT32_proj.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\Objects\AT32_proj.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5060960: Last Updated: Thu Jun 08 12:42:00 2023
<BR><P>
<H3>Maximum Stack Usage =        168 bytes + Unknown(Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
main &rArr; vTaskStartScheduler &rArr; xTaskCreate &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[45]">ACC_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[45]">ACC_IRQHandler</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[45]">ACC_IRQHandler</a> from startup_at32f413rx_hd.o(.text) referenced from startup_at32f413rx_hd.o(RESET)
 <LI><a href="#[1c]">ADC1_2_IRQHandler</a> from startup_at32f413rx_hd.o(.text) referenced from startup_at32f413rx_hd.o(RESET)
 <LI><a href="#[4]">BusFault_Handler</a> from at32f4xx_it.o(i.BusFault_Handler) referenced from startup_at32f413rx_hd.o(RESET)
 <LI><a href="#[1f]">CAN1_RX1_IRQHandler</a> from startup_at32f413rx_hd.o(.text) referenced from startup_at32f413rx_hd.o(RESET)
 <LI><a href="#[20]">CAN1_SCE_IRQHandler</a> from startup_at32f413rx_hd.o(.text) referenced from startup_at32f413rx_hd.o(RESET)
 <LI><a href="#[42]">CAN2_RX0_IRQHandler</a> from startup_at32f413rx_hd.o(.text) referenced from startup_at32f413rx_hd.o(RESET)
 <LI><a href="#[43]">CAN2_RX1_IRQHandler</a> from startup_at32f413rx_hd.o(.text) referenced from startup_at32f413rx_hd.o(RESET)
 <LI><a href="#[44]">CAN2_SCE_IRQHandler</a> from startup_at32f413rx_hd.o(.text) referenced from startup_at32f413rx_hd.o(RESET)
 <LI><a href="#[41]">CAN2_TX_IRQHandler</a> from startup_at32f413rx_hd.o(.text) referenced from startup_at32f413rx_hd.o(RESET)
 <LI><a href="#[52]">Current_Function</a> from main.o(i.Current_Function) referenced from main.o(i.main)
 <LI><a href="#[15]">DMA1_Channel1_IRQHandler</a> from startup_at32f413rx_hd.o(.text) referenced from startup_at32f413rx_hd.o(RESET)
 <LI><a href="#[16]">DMA1_Channel2_IRQHandler</a> from startup_at32f413rx_hd.o(.text) referenced from startup_at32f413rx_hd.o(RESET)
 <LI><a href="#[17]">DMA1_Channel3_IRQHandler</a> from startup_at32f413rx_hd.o(.text) referenced from startup_at32f413rx_hd.o(RESET)
 <LI><a href="#[18]">DMA1_Channel4_IRQHandler</a> from startup_at32f413rx_hd.o(.text) referenced from startup_at32f413rx_hd.o(RESET)
 <LI><a href="#[19]">DMA1_Channel5_IRQHandler</a> from startup_at32f413rx_hd.o(.text) referenced from startup_at32f413rx_hd.o(RESET)
 <LI><a href="#[1a]">DMA1_Channel6_IRQHandler</a> from startup_at32f413rx_hd.o(.text) referenced from startup_at32f413rx_hd.o(RESET)
 <LI><a href="#[1b]">DMA1_Channel7_IRQHandler</a> from startup_at32f413rx_hd.o(.text) referenced from startup_at32f413rx_hd.o(RESET)
 <LI><a href="#[3d]">DMA2_Channel1_IRQHandler</a> from startup_at32f413rx_hd.o(.text) referenced from startup_at32f413rx_hd.o(RESET)
 <LI><a href="#[3e]">DMA2_Channel2_IRQHandler</a> from startup_at32f413rx_hd.o(.text) referenced from startup_at32f413rx_hd.o(RESET)
 <LI><a href="#[3f]">DMA2_Channel3_IRQHandler</a> from startup_at32f413rx_hd.o(.text) referenced from startup_at32f413rx_hd.o(RESET)
 <LI><a href="#[40]">DMA2_Channel4_5_IRQHandler</a> from startup_at32f413rx_hd.o(.text) referenced from startup_at32f413rx_hd.o(RESET)
 <LI><a href="#[48]">DMA2_Channel6_7_IRQHandler</a> from startup_at32f413rx_hd.o(.text) referenced from startup_at32f413rx_hd.o(RESET)
 <LI><a href="#[7]">DebugMon_Handler</a> from at32f4xx_it.o(i.DebugMon_Handler) referenced from startup_at32f413rx_hd.o(RESET)
 <LI><a href="#[10]">EXTI0_IRQHandler</a> from startup_at32f413rx_hd.o(.text) referenced from startup_at32f413rx_hd.o(RESET)
 <LI><a href="#[32]">EXTI15_10_IRQHandler</a> from startup_at32f413rx_hd.o(.text) referenced from startup_at32f413rx_hd.o(RESET)
 <LI><a href="#[11]">EXTI1_IRQHandler</a> from startup_at32f413rx_hd.o(.text) referenced from startup_at32f413rx_hd.o(RESET)
 <LI><a href="#[12]">EXTI2_IRQHandler</a> from startup_at32f413rx_hd.o(.text) referenced from startup_at32f413rx_hd.o(RESET)
 <LI><a href="#[13]">EXTI3_IRQHandler</a> from startup_at32f413rx_hd.o(.text) referenced from startup_at32f413rx_hd.o(RESET)
 <LI><a href="#[14]">EXTI4_IRQHandler</a> from startup_at32f413rx_hd.o(.text) referenced from startup_at32f413rx_hd.o(RESET)
 <LI><a href="#[21]">EXTI9_5_IRQHandler</a> from startup_at32f413rx_hd.o(.text) referenced from startup_at32f413rx_hd.o(RESET)
 <LI><a href="#[e]">FLASH_IRQHandler</a> from startup_at32f413rx_hd.o(.text) referenced from startup_at32f413rx_hd.o(RESET)
 <LI><a href="#[2]">HardFault_Handler</a> from at32f4xx_it.o(i.HardFault_Handler) referenced from startup_at32f413rx_hd.o(RESET)
 <LI><a href="#[2a]">I2C1_ER_IRQHandler</a> from startup_at32f413rx_hd.o(.text) referenced from startup_at32f413rx_hd.o(RESET)
 <LI><a href="#[29]">I2C1_EV_IRQHandler</a> from startup_at32f413rx_hd.o(.text) referenced from startup_at32f413rx_hd.o(RESET)
 <LI><a href="#[2c]">I2C2_ER_IRQHandler</a> from startup_at32f413rx_hd.o(.text) referenced from startup_at32f413rx_hd.o(RESET)
 <LI><a href="#[2b]">I2C2_EV_IRQHandler</a> from startup_at32f413rx_hd.o(.text) referenced from startup_at32f413rx_hd.o(RESET)
 <LI><a href="#[3]">MemManage_Handler</a> from at32f4xx_it.o(i.MemManage_Handler) referenced from startup_at32f413rx_hd.o(RESET)
 <LI><a href="#[1]">NMI_Handler</a> from at32f4xx_it.o(i.NMI_Handler) referenced from startup_at32f413rx_hd.o(RESET)
 <LI><a href="#[b]">PVD_IRQHandler</a> from startup_at32f413rx_hd.o(.text) referenced from startup_at32f413rx_hd.o(RESET)
 <LI><a href="#[8]">PendSV_Handler</a> from port.o(.emb_text) referenced from startup_at32f413rx_hd.o(RESET)
 <LI><a href="#[f]">RCC_IRQHandler</a> from startup_at32f413rx_hd.o(.text) referenced from startup_at32f413rx_hd.o(RESET)
 <LI><a href="#[4d]">RS232RxTask_Function</a> from main.o(i.RS232RxTask_Function) referenced from main.o(i.main)
 <LI><a href="#[4e]">RS232Task_Function</a> from main.o(i.RS232Task_Function) referenced from main.o(i.main)
 <LI><a href="#[4c]">RS485RxTask_Function</a> from main.o(i.RS485RxTask_Function) referenced from main.o(i.main)
 <LI><a href="#[4f]">RS485Task_Function</a> from main.o(i.RS485Task_Function) referenced from main.o(i.main)
 <LI><a href="#[33]">RTCAlarm_IRQHandler</a> from startup_at32f413rx_hd.o(.text) referenced from startup_at32f413rx_hd.o(RESET)
 <LI><a href="#[d]">RTC_IRQHandler</a> from startup_at32f413rx_hd.o(.text) referenced from startup_at32f413rx_hd.o(RESET)
 <LI><a href="#[0]">Reset_Handler</a> from startup_at32f413rx_hd.o(.text) referenced from startup_at32f413rx_hd.o(RESET)
 <LI><a href="#[39]">SDIO_IRQHandler</a> from startup_at32f413rx_hd.o(.text) referenced from startup_at32f413rx_hd.o(RESET)
 <LI><a href="#[2d]">SPI1_IRQHandler</a> from startup_at32f413rx_hd.o(.text) referenced from startup_at32f413rx_hd.o(RESET)
 <LI><a href="#[2e]">SPI2_IRQHandler</a> from startup_at32f413rx_hd.o(.text) referenced from startup_at32f413rx_hd.o(RESET)
 <LI><a href="#[6]">SVC_Handler</a> from port.o(.emb_text) referenced from startup_at32f413rx_hd.o(RESET)
 <LI><a href="#[50]">Status_Function</a> from main.o(i.Status_Function) referenced from main.o(i.main)
 <LI><a href="#[9]">SysTick_Handler</a> from port.o(i.SysTick_Handler) referenced from startup_at32f413rx_hd.o(RESET)
 <LI><a href="#[4a]">SystemInit</a> from system_at32f4xx.o(i.SystemInit) referenced from startup_at32f413rx_hd.o(.text)
 <LI><a href="#[c]">TAMPER_IRQHandler</a> from startup_at32f413rx_hd.o(.text) referenced from startup_at32f413rx_hd.o(RESET)
 <LI><a href="#[22]">TMR1_BRK_TMR9_IRQHandler</a> from startup_at32f413rx_hd.o(.text) referenced from startup_at32f413rx_hd.o(RESET)
 <LI><a href="#[25]">TMR1_CC_IRQHandler</a> from startup_at32f413rx_hd.o(.text) referenced from startup_at32f413rx_hd.o(RESET)
 <LI><a href="#[23]">TMR1_OV_TMR10_IRQHandler</a> from startup_at32f413rx_hd.o(.text) referenced from startup_at32f413rx_hd.o(RESET)
 <LI><a href="#[24]">TMR1_TRG_COM_TMR11_IRQHandler</a> from startup_at32f413rx_hd.o(.text) referenced from startup_at32f413rx_hd.o(RESET)
 <LI><a href="#[26]">TMR2_GLOBAL_IRQHandler</a> from startup_at32f413rx_hd.o(.text) referenced from startup_at32f413rx_hd.o(RESET)
 <LI><a href="#[27]">TMR3_GLOBAL_IRQHandler</a> from startup_at32f413rx_hd.o(.text) referenced from startup_at32f413rx_hd.o(RESET)
 <LI><a href="#[28]">TMR4_GLOBAL_IRQHandler</a> from startup_at32f413rx_hd.o(.text) referenced from startup_at32f413rx_hd.o(RESET)
 <LI><a href="#[3a]">TMR5_GLOBAL_IRQHandler</a> from startup_at32f413rx_hd.o(.text) referenced from startup_at32f413rx_hd.o(RESET)
 <LI><a href="#[35]">TMR8_BRK_TMR12_IRQHandler</a> from startup_at32f413rx_hd.o(.text) referenced from startup_at32f413rx_hd.o(RESET)
 <LI><a href="#[38]">TMR8_CC_IRQHandler</a> from startup_at32f413rx_hd.o(.text) referenced from startup_at32f413rx_hd.o(RESET)
 <LI><a href="#[36]">TMR8_OV_TMR13_IRQHandler</a> from startup_at32f413rx_hd.o(.text) referenced from startup_at32f413rx_hd.o(RESET)
 <LI><a href="#[37]">TMR8_TRG_COM_TMR14_IRQHandler</a> from startup_at32f413rx_hd.o(.text) referenced from startup_at32f413rx_hd.o(RESET)
 <LI><a href="#[3b]">UART4_IRQHandler</a> from startup_at32f413rx_hd.o(.text) referenced from startup_at32f413rx_hd.o(RESET)
 <LI><a href="#[3c]">UART5_IRQHandler</a> from startup_at32f413rx_hd.o(.text) referenced from startup_at32f413rx_hd.o(RESET)
 <LI><a href="#[2f]">USART1_IRQHandler</a> from startup_at32f413rx_hd.o(.text) referenced from startup_at32f413rx_hd.o(RESET)
 <LI><a href="#[30]">USART2_IRQHandler</a> from main.o(i.USART2_IRQHandler) referenced from startup_at32f413rx_hd.o(RESET)
 <LI><a href="#[31]">USART3_IRQHandler</a> from main.o(i.USART3_IRQHandler) referenced from startup_at32f413rx_hd.o(RESET)
 <LI><a href="#[34]">USBWakeUp_IRQHandler</a> from startup_at32f413rx_hd.o(.text) referenced from startup_at32f413rx_hd.o(RESET)
 <LI><a href="#[1d]">USB_HP_CAN1_TX_IRQHandler</a> from startup_at32f413rx_hd.o(.text) referenced from startup_at32f413rx_hd.o(RESET)
 <LI><a href="#[46]">USB_HP_IRQHandler</a> from startup_at32f413rx_hd.o(.text) referenced from startup_at32f413rx_hd.o(RESET)
 <LI><a href="#[1e]">USB_LP_CAN1_RX0_IRQHandler</a> from startup_at32f413rx_hd.o(.text) referenced from startup_at32f413rx_hd.o(RESET)
 <LI><a href="#[47]">USB_LP_IRQHandler</a> from startup_at32f413rx_hd.o(.text) referenced from startup_at32f413rx_hd.o(RESET)
 <LI><a href="#[5]">UsageFault_Handler</a> from at32f4xx_it.o(i.UsageFault_Handler) referenced from startup_at32f413rx_hd.o(RESET)
 <LI><a href="#[51]">Voltage_Function</a> from main.o(i.Voltage_Function) referenced from main.o(i.main)
 <LI><a href="#[a]">WWDG_IRQHandler</a> from startup_at32f413rx_hd.o(.text) referenced from startup_at32f413rx_hd.o(RESET)
 <LI><a href="#[4b]">__main</a> from entry.o(.ARM.Collect$$$$00000000) referenced from startup_at32f413rx_hd.o(.text)
 <LI><a href="#[49]">main</a> from main.o(i.main) referenced from entry9a.o(.ARM.Collect$$$$0000000B)
 <LI><a href="#[54]">prvIdleTask</a> from tasks.o(i.prvIdleTask) referenced from tasks.o(i.vTaskStartScheduler)
 <LI><a href="#[53]">prvTaskExitError</a> from port.o(i.prvTaskExitError) referenced from port.o(i.pxPortInitialiseStack)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[4b]"></a>__main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry.o(.ARM.Collect$$$$00000000))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f413rx_hd.o(.text)
</UL>
<P><STRONG><a name="[ae]"></a>_main_stk</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry2.o(.ARM.Collect$$$$00000001))

<P><STRONG><a name="[55]"></a>_main_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[5e]"></a>__main_after_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Called By]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[af]"></a>_main_clock</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry7b.o(.ARM.Collect$$$$00000008))

<P><STRONG><a name="[b0]"></a>_main_cpp_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry8b.o(.ARM.Collect$$$$0000000A))

<P><STRONG><a name="[b1]"></a>_main_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry9a.o(.ARM.Collect$$$$0000000B))

<P><STRONG><a name="[b2]"></a>__rt_lib_shutdown_fini</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry12b.o(.ARM.Collect$$$$0000000E))

<P><STRONG><a name="[b3]"></a>__rt_final_cpp</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry10a.o(.ARM.Collect$$$$0000000F))

<P><STRONG><a name="[b4]"></a>__rt_final_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry11a.o(.ARM.Collect$$$$00000011))

<P><STRONG><a name="[6]"></a>SVC_Handler</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, port.o(.emb_text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f413rx_hd.o(RESET)
</UL>
<P><STRONG><a name="[ac]"></a>__asm___6_port_c_39a90d8d__prvStartFirstTask</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, port.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xPortStartScheduler
</UL>

<P><STRONG><a name="[ab]"></a>__asm___6_port_c_39a90d8d__prvEnableVFP</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, port.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xPortStartScheduler
</UL>

<P><STRONG><a name="[8]"></a>PendSV_Handler</STRONG> (Thumb, 88 bytes, Stack size 0 bytes, port.o(.emb_text))
<BR><BR>[Calls]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSwitchContext
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f413rx_hd.o(RESET)
</UL>
<P><STRONG><a name="[b5]"></a>vPortGetIPSR</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, port.o(.emb_text), UNUSED)

<P><STRONG><a name="[0]"></a>Reset_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, startup_at32f413rx_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f413rx_hd.o(RESET)
</UL>
<P><STRONG><a name="[45]"></a>ACC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32f413rx_hd.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACC_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACC_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f413rx_hd.o(RESET)
</UL>
<P><STRONG><a name="[1c]"></a>ADC1_2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32f413rx_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f413rx_hd.o(RESET)
</UL>
<P><STRONG><a name="[1f]"></a>CAN1_RX1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32f413rx_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f413rx_hd.o(RESET)
</UL>
<P><STRONG><a name="[20]"></a>CAN1_SCE_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32f413rx_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f413rx_hd.o(RESET)
</UL>
<P><STRONG><a name="[42]"></a>CAN2_RX0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32f413rx_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f413rx_hd.o(RESET)
</UL>
<P><STRONG><a name="[43]"></a>CAN2_RX1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32f413rx_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f413rx_hd.o(RESET)
</UL>
<P><STRONG><a name="[44]"></a>CAN2_SCE_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32f413rx_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f413rx_hd.o(RESET)
</UL>
<P><STRONG><a name="[41]"></a>CAN2_TX_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32f413rx_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f413rx_hd.o(RESET)
</UL>
<P><STRONG><a name="[15]"></a>DMA1_Channel1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32f413rx_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f413rx_hd.o(RESET)
</UL>
<P><STRONG><a name="[16]"></a>DMA1_Channel2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32f413rx_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f413rx_hd.o(RESET)
</UL>
<P><STRONG><a name="[17]"></a>DMA1_Channel3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32f413rx_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f413rx_hd.o(RESET)
</UL>
<P><STRONG><a name="[18]"></a>DMA1_Channel4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32f413rx_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f413rx_hd.o(RESET)
</UL>
<P><STRONG><a name="[19]"></a>DMA1_Channel5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32f413rx_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f413rx_hd.o(RESET)
</UL>
<P><STRONG><a name="[1a]"></a>DMA1_Channel6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32f413rx_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f413rx_hd.o(RESET)
</UL>
<P><STRONG><a name="[1b]"></a>DMA1_Channel7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32f413rx_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f413rx_hd.o(RESET)
</UL>
<P><STRONG><a name="[3d]"></a>DMA2_Channel1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32f413rx_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f413rx_hd.o(RESET)
</UL>
<P><STRONG><a name="[3e]"></a>DMA2_Channel2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32f413rx_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f413rx_hd.o(RESET)
</UL>
<P><STRONG><a name="[3f]"></a>DMA2_Channel3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32f413rx_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f413rx_hd.o(RESET)
</UL>
<P><STRONG><a name="[40]"></a>DMA2_Channel4_5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32f413rx_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f413rx_hd.o(RESET)
</UL>
<P><STRONG><a name="[48]"></a>DMA2_Channel6_7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32f413rx_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f413rx_hd.o(RESET)
</UL>
<P><STRONG><a name="[10]"></a>EXTI0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32f413rx_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f413rx_hd.o(RESET)
</UL>
<P><STRONG><a name="[32]"></a>EXTI15_10_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32f413rx_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f413rx_hd.o(RESET)
</UL>
<P><STRONG><a name="[11]"></a>EXTI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32f413rx_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f413rx_hd.o(RESET)
</UL>
<P><STRONG><a name="[12]"></a>EXTI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32f413rx_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f413rx_hd.o(RESET)
</UL>
<P><STRONG><a name="[13]"></a>EXTI3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32f413rx_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f413rx_hd.o(RESET)
</UL>
<P><STRONG><a name="[14]"></a>EXTI4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32f413rx_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f413rx_hd.o(RESET)
</UL>
<P><STRONG><a name="[21]"></a>EXTI9_5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32f413rx_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f413rx_hd.o(RESET)
</UL>
<P><STRONG><a name="[e]"></a>FLASH_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32f413rx_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f413rx_hd.o(RESET)
</UL>
<P><STRONG><a name="[2a]"></a>I2C1_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32f413rx_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f413rx_hd.o(RESET)
</UL>
<P><STRONG><a name="[29]"></a>I2C1_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32f413rx_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f413rx_hd.o(RESET)
</UL>
<P><STRONG><a name="[2c]"></a>I2C2_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32f413rx_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f413rx_hd.o(RESET)
</UL>
<P><STRONG><a name="[2b]"></a>I2C2_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32f413rx_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f413rx_hd.o(RESET)
</UL>
<P><STRONG><a name="[b]"></a>PVD_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32f413rx_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f413rx_hd.o(RESET)
</UL>
<P><STRONG><a name="[f]"></a>RCC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32f413rx_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f413rx_hd.o(RESET)
</UL>
<P><STRONG><a name="[33]"></a>RTCAlarm_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32f413rx_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f413rx_hd.o(RESET)
</UL>
<P><STRONG><a name="[d]"></a>RTC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32f413rx_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f413rx_hd.o(RESET)
</UL>
<P><STRONG><a name="[39]"></a>SDIO_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32f413rx_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f413rx_hd.o(RESET)
</UL>
<P><STRONG><a name="[2d]"></a>SPI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32f413rx_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f413rx_hd.o(RESET)
</UL>
<P><STRONG><a name="[2e]"></a>SPI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32f413rx_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f413rx_hd.o(RESET)
</UL>
<P><STRONG><a name="[c]"></a>TAMPER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32f413rx_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f413rx_hd.o(RESET)
</UL>
<P><STRONG><a name="[22]"></a>TMR1_BRK_TMR9_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32f413rx_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f413rx_hd.o(RESET)
</UL>
<P><STRONG><a name="[25]"></a>TMR1_CC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32f413rx_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f413rx_hd.o(RESET)
</UL>
<P><STRONG><a name="[23]"></a>TMR1_OV_TMR10_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32f413rx_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f413rx_hd.o(RESET)
</UL>
<P><STRONG><a name="[24]"></a>TMR1_TRG_COM_TMR11_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32f413rx_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f413rx_hd.o(RESET)
</UL>
<P><STRONG><a name="[26]"></a>TMR2_GLOBAL_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32f413rx_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f413rx_hd.o(RESET)
</UL>
<P><STRONG><a name="[27]"></a>TMR3_GLOBAL_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32f413rx_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f413rx_hd.o(RESET)
</UL>
<P><STRONG><a name="[28]"></a>TMR4_GLOBAL_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32f413rx_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f413rx_hd.o(RESET)
</UL>
<P><STRONG><a name="[3a]"></a>TMR5_GLOBAL_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32f413rx_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f413rx_hd.o(RESET)
</UL>
<P><STRONG><a name="[35]"></a>TMR8_BRK_TMR12_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32f413rx_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f413rx_hd.o(RESET)
</UL>
<P><STRONG><a name="[38]"></a>TMR8_CC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32f413rx_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f413rx_hd.o(RESET)
</UL>
<P><STRONG><a name="[36]"></a>TMR8_OV_TMR13_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32f413rx_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f413rx_hd.o(RESET)
</UL>
<P><STRONG><a name="[37]"></a>TMR8_TRG_COM_TMR14_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32f413rx_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f413rx_hd.o(RESET)
</UL>
<P><STRONG><a name="[3b]"></a>UART4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32f413rx_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f413rx_hd.o(RESET)
</UL>
<P><STRONG><a name="[3c]"></a>UART5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32f413rx_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f413rx_hd.o(RESET)
</UL>
<P><STRONG><a name="[2f]"></a>USART1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32f413rx_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f413rx_hd.o(RESET)
</UL>
<P><STRONG><a name="[34]"></a>USBWakeUp_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32f413rx_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f413rx_hd.o(RESET)
</UL>
<P><STRONG><a name="[1d]"></a>USB_HP_CAN1_TX_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32f413rx_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f413rx_hd.o(RESET)
</UL>
<P><STRONG><a name="[46]"></a>USB_HP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32f413rx_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f413rx_hd.o(RESET)
</UL>
<P><STRONG><a name="[1e]"></a>USB_LP_CAN1_RX0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32f413rx_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f413rx_hd.o(RESET)
</UL>
<P><STRONG><a name="[47]"></a>USB_LP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32f413rx_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f413rx_hd.o(RESET)
</UL>
<P><STRONG><a name="[a]"></a>WWDG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32f413rx_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f413rx_hd.o(RESET)
</UL>
<P><STRONG><a name="[58]"></a>__aeabi_uldivmod</STRONG> (Thumb, 98 bytes, Stack size 40 bytes, uldiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Init
</UL>

<P><STRONG><a name="[83]"></a>__aeabi_memcpy</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, memcpya.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RS485Task_Function
</UL>

<P><STRONG><a name="[b6]"></a>__aeabi_memcpy4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memcpya.o(.text), UNUSED)

<P><STRONG><a name="[b7]"></a>__aeabi_memcpy8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memcpya.o(.text), UNUSED)

<P><STRONG><a name="[5c]"></a>__aeabi_memset</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memset
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>

<P><STRONG><a name="[b8]"></a>__aeabi_memset4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[b9]"></a>__aeabi_memset8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[5b]"></a>__aeabi_memclr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RS485Task_Function
</UL>

<P><STRONG><a name="[ba]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[bb]"></a>__aeabi_memclr8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[5d]"></a>memset</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, memseta.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>

<P><STRONG><a name="[84]"></a>strstr</STRONG> (Thumb, 36 bytes, Stack size 12 bytes, strstr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = strstr
</UL>
<BR>[Called By]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RS485Task_Function
</UL>

<P><STRONG><a name="[5a]"></a>__aeabi_llsl</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, llshl.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>

<P><STRONG><a name="[bc]"></a>_ll_shift_l</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llshl.o(.text), UNUSED)

<P><STRONG><a name="[59]"></a>__aeabi_llsr</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, llushr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>

<P><STRONG><a name="[bd]"></a>_ll_ushift_r</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llushr.o(.text), UNUSED)

<P><STRONG><a name="[56]"></a>__scatterload</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, init.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main_after_scatterload
</UL>
<BR>[Called By]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_main_scatterload
</UL>

<P><STRONG><a name="[be]"></a>__scatterload_rt2</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, init.o(.text), UNUSED)

<P><STRONG><a name="[5f]"></a>ADC_Configuration</STRONG> (Thumb, 228 bytes, Stack size 72 bytes, peta.o(i.ADC_Configuration))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = ADC_Configuration &rArr; ADC_RegularChannelConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Reset
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Init
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_DefaultInitParaConfig
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_ChannelEnable
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_StructInit
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_StartCalibration
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_SoftwareStartConvCtrl
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_RstCalibration
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_RegularChannelConfig
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Init
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_GetResetCalibrationStatus
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_GetCalibrationStatus
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_DMACtrl
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Ctrl
</UL>
<BR>[Called By]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[68]"></a>ADC_Ctrl</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, at32f4xx_adc.o(i.ADC_Ctrl))
<BR><BR>[Called By]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Configuration
</UL>

<P><STRONG><a name="[67]"></a>ADC_DMACtrl</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, at32f4xx_adc.o(i.ADC_DMACtrl))
<BR><BR>[Called By]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Configuration
</UL>

<P><STRONG><a name="[6c]"></a>ADC_GetCalibrationStatus</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, at32f4xx_adc.o(i.ADC_GetCalibrationStatus))
<BR><BR>[Called By]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Configuration
</UL>

<P><STRONG><a name="[6a]"></a>ADC_GetResetCalibrationStatus</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, at32f4xx_adc.o(i.ADC_GetResetCalibrationStatus))
<BR><BR>[Called By]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Configuration
</UL>

<P><STRONG><a name="[65]"></a>ADC_Init</STRONG> (Thumb, 70 bytes, Stack size 12 bytes, at32f4xx_adc.o(i.ADC_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = ADC_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Configuration
</UL>

<P><STRONG><a name="[66]"></a>ADC_RegularChannelConfig</STRONG> (Thumb, 184 bytes, Stack size 20 bytes, at32f4xx_adc.o(i.ADC_RegularChannelConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = ADC_RegularChannelConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Configuration
</UL>

<P><STRONG><a name="[69]"></a>ADC_RstCalibration</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, at32f4xx_adc.o(i.ADC_RstCalibration))
<BR><BR>[Called By]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Configuration
</UL>

<P><STRONG><a name="[6d]"></a>ADC_SoftwareStartConvCtrl</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, at32f4xx_adc.o(i.ADC_SoftwareStartConvCtrl))
<BR><BR>[Called By]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Configuration
</UL>

<P><STRONG><a name="[6b]"></a>ADC_StartCalibration</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, at32f4xx_adc.o(i.ADC_StartCalibration))
<BR><BR>[Called By]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Configuration
</UL>

<P><STRONG><a name="[64]"></a>ADC_StructInit</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, at32f4xx_adc.o(i.ADC_StructInit))
<BR><BR>[Called By]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Configuration
</UL>

<P><STRONG><a name="[6e]"></a>AT32_BUTTON_Init</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, at32_board.o(i.AT32_BUTTON_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = AT32_BUTTON_Init &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_StructInit
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT32_Board_Init
</UL>

<P><STRONG><a name="[72]"></a>AT32_Board_Init</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, at32_board.o(i.AT32_Board_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = AT32_Board_Init &rArr; AT32_LEDn_Init &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay_init
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT32_LEDn_OFF
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT32_LEDn_Init
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT32_BUTTON_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[74]"></a>AT32_LEDn_Init</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, at32_board.o(i.AT32_LEDn_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = AT32_LEDn_Init &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_StructInit
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT32_Board_Init
</UL>

<P><STRONG><a name="[75]"></a>AT32_LEDn_OFF</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, at32_board.o(i.AT32_LEDn_OFF))
<BR><BR>[Called By]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT32_Board_Init
</UL>

<P><STRONG><a name="[4]"></a>BusFault_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, at32f4xx_it.o(i.BusFault_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f413rx_hd.o(RESET)
</UL>
<P><STRONG><a name="[82]"></a>CheckSum</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, main.o(i.CheckSum))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = CheckSum
</UL>
<BR>[Called By]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RS485Task_Function
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RS232Task_Function
</UL>

<P><STRONG><a name="[52]"></a>Current_Function</STRONG> (Thumb, 212 bytes, Stack size 48 bytes, main.o(i.Current_Function))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = Current_Function &rArr; vTaskDelay &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendData
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(i.main)
</UL>
<P><STRONG><a name="[63]"></a>DMA_ChannelEnable</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, at32f4xx_dma.o(i.DMA_ChannelEnable))
<BR><BR>[Called By]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Configuration
</UL>

<P><STRONG><a name="[61]"></a>DMA_DefaultInitParaConfig</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, at32f4xx_dma.o(i.DMA_DefaultInitParaConfig))
<BR><BR>[Called By]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Configuration
</UL>

<P><STRONG><a name="[62]"></a>DMA_Init</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, at32f4xx_dma.o(i.DMA_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = DMA_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Configuration
</UL>

<P><STRONG><a name="[60]"></a>DMA_Reset</STRONG> (Thumb, 324 bytes, Stack size 0 bytes, at32f4xx_dma.o(i.DMA_Reset))
<BR><BR>[Called By]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Configuration
</UL>

<P><STRONG><a name="[7]"></a>DebugMon_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, at32f4xx_it.o(i.DebugMon_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f413rx_hd.o(RESET)
</UL>
<P><STRONG><a name="[73]"></a>Delay_init</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, at32_board.o(i.Delay_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Delay_init
</UL>
<BR>[Calls]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_CLKSourceConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT32_Board_Init
</UL>

<P><STRONG><a name="[79]"></a>GPIO_Configuration</STRONG> (Thumb, 234 bytes, Stack size 8 bytes, peta.o(i.GPIO_Configuration))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = GPIO_Configuration &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinsRemapConfig
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[71]"></a>GPIO_Init</STRONG> (Thumb, 278 bytes, Stack size 24 bytes, at32f4xx_gpio.o(i.GPIO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Configuration
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT32_LEDn_Init
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT32_BUTTON_Init
</UL>

<P><STRONG><a name="[7a]"></a>GPIO_PinsRemapConfig</STRONG> (Thumb, 832 bytes, Stack size 20 bytes, at32f4xx_gpio.o(i.GPIO_PinsRemapConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = GPIO_PinsRemapConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Configuration
</UL>

<P><STRONG><a name="[70]"></a>GPIO_StructInit</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, at32f4xx_gpio.o(i.GPIO_StructInit))
<BR><BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT32_LEDn_Init
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT32_BUTTON_Init
</UL>

<P><STRONG><a name="[2]"></a>HardFault_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, at32f4xx_it.o(i.HardFault_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f413rx_hd.o(RESET)
</UL>
<P><STRONG><a name="[3]"></a>MemManage_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, at32f4xx_it.o(i.MemManage_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f413rx_hd.o(RESET)
</UL>
<P><STRONG><a name="[1]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, at32f4xx_it.o(i.NMI_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f413rx_hd.o(RESET)
</UL>
<P><STRONG><a name="[7b]"></a>NVIC_Configuration</STRONG> (Thumb, 76 bytes, Stack size 8 bytes, peta.o(i.NVIC_Configuration))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = NVIC_Configuration &rArr; NVIC_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_PriorityGroupConfig
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RS485RxTask_Function
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RS232RxTask_Function
</UL>

<P><STRONG><a name="[7d]"></a>NVIC_Init</STRONG> (Thumb, 100 bytes, Stack size 16 bytes, misc.o(i.NVIC_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = NVIC_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Configuration
</UL>

<P><STRONG><a name="[7c]"></a>NVIC_PriorityGroupConfig</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, misc.o(i.NVIC_PriorityGroupConfig))
<BR><BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Configuration
</UL>

<P><STRONG><a name="[7f]"></a>RCC_AHBPeriphClockCmd</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, at32f4xx_rcc.o(i.RCC_AHBPeriphClockCmd))
<BR><BR>[Called By]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_Configuration
</UL>

<P><STRONG><a name="[80]"></a>RCC_APB1PeriphClockCmd</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, at32f4xx_rcc.o(i.RCC_APB1PeriphClockCmd))
<BR><BR>[Called By]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_Configuration
</UL>

<P><STRONG><a name="[6f]"></a>RCC_APB2PeriphClockCmd</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, at32f4xx_rcc.o(i.RCC_APB2PeriphClockCmd))
<BR><BR>[Called By]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_Configuration
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT32_LEDn_Init
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT32_BUTTON_Init
</UL>

<P><STRONG><a name="[7e]"></a>RCC_Configuration</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, peta.o(i.RCC_Configuration))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = RCC_Configuration
</UL>
<BR>[Calls]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphClockCmd
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHBPeriphClockCmd
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[92]"></a>RCC_GetClocksFreq</STRONG> (Thumb, 326 bytes, Stack size 20 bytes, at32f4xx_rcc.o(i.RCC_GetClocksFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = RCC_GetClocksFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Init
</UL>

<P><STRONG><a name="[4d]"></a>RS232RxTask_Function</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, main.o(i.RS232RxTask_Function))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = RS232RxTask_Function &rArr; NVIC_Configuration &rArr; NVIC_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Configuration
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(i.main)
</UL>
<P><STRONG><a name="[4e]"></a>RS232Task_Function</STRONG> (Thumb, 426 bytes, Stack size 64 bytes, main.o(i.RS232Task_Function))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = RS232Task_Function &rArr; vTaskDelay &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendData
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Status_Compare
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckSum
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(i.main)
</UL>
<P><STRONG><a name="[4c]"></a>RS485RxTask_Function</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, main.o(i.RS485RxTask_Function))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = RS485RxTask_Function &rArr; NVIC_Configuration &rArr; NVIC_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Configuration
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(i.main)
</UL>
<P><STRONG><a name="[4f]"></a>RS485Task_Function</STRONG> (Thumb, 418 bytes, Stack size 24 bytes, main.o(i.RS485Task_Function))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = RS485Task_Function &rArr; vTaskDelay &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendData
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckSum
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_SendData
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strstr
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(i.main)
</UL>
<P><STRONG><a name="[77]"></a>SendData</STRONG> (Thumb, 50 bytes, Stack size 24 bytes, peta.o(i.SendData))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = SendData
</UL>
<BR>[Calls]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_SendData
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_GetFlagStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Voltage_Function
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RS485Task_Function
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RS232Task_Function
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Current_Function
</UL>

<P><STRONG><a name="[81]"></a>Status_Compare</STRONG> (Thumb, 34 bytes, Stack size 12 bytes, main.o(i.Status_Compare))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = Status_Compare
</UL>
<BR>[Called By]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RS232Task_Function
</UL>

<P><STRONG><a name="[50]"></a>Status_Function</STRONG> (Thumb, 54 bytes, Stack size 0 bytes, main.o(i.Status_Function))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = Status_Function &rArr; vTaskDelay &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(i.main)
</UL>
<P><STRONG><a name="[78]"></a>SysTick_CLKSourceConfig</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, misc.o(i.SysTick_CLKSourceConfig))
<BR><BR>[Called By]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay_init
</UL>

<P><STRONG><a name="[9]"></a>SysTick_Handler</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, port.o(i.SysTick_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = SysTick_Handler &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskIncrementTick
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f413rx_hd.o(RESET)
</UL>
<P><STRONG><a name="[4a]"></a>SystemInit</STRONG> (Thumb, 106 bytes, Stack size 8 bytes, system_at32f4xx.o(i.SystemInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SystemInit
</UL>
<BR>[Calls]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSysClock
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f413rx_hd.o(.text)
</UL>
<P><STRONG><a name="[89]"></a>UART_Configuration</STRONG> (Thumb, 196 bytes, Stack size 24 bytes, peta.o(i.UART_Configuration))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = UART_Configuration &rArr; USART_Init &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_DMACmd
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_StructInit
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Init
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_INTConfig
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[30]"></a>USART2_IRQHandler</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, main.o(i.USART2_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = USART2_IRQHandler &rArr; USART_INTConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ReceiveData
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_GetITStatus
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ClearITPendingBit
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_INTConfig
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f413rx_hd.o(RESET)
</UL>
<P><STRONG><a name="[31]"></a>USART3_IRQHandler</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, main.o(i.USART3_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = USART3_IRQHandler &rArr; USART_INTConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ReceiveData
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_GetITStatus
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ClearITPendingBit
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_INTConfig
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f413rx_hd.o(RESET)
</UL>
<P><STRONG><a name="[90]"></a>USART_ClearITPendingBit</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, at32f4xx_usart.o(i.USART_ClearITPendingBit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USART_ClearITPendingBit
</UL>
<BR>[Called By]<UL><LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART3_IRQHandler
<LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART2_IRQHandler
</UL>

<P><STRONG><a name="[8e]"></a>USART_Cmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, at32f4xx_usart.o(i.USART_Cmd))
<BR><BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Configuration
</UL>

<P><STRONG><a name="[8c]"></a>USART_DMACmd</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, at32f4xx_usart.o(i.USART_DMACmd))
<BR><BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Configuration
</UL>

<P><STRONG><a name="[86]"></a>USART_GetFlagStatus</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, at32f4xx_usart.o(i.USART_GetFlagStatus))
<BR><BR>[Called By]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendData
</UL>

<P><STRONG><a name="[8f]"></a>USART_GetITStatus</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, at32f4xx_usart.o(i.USART_GetITStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = USART_GetITStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART3_IRQHandler
<LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART2_IRQHandler
</UL>

<P><STRONG><a name="[8d]"></a>USART_INTConfig</STRONG> (Thumb, 74 bytes, Stack size 20 bytes, at32f4xx_usart.o(i.USART_INTConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = USART_INTConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Configuration
<LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART3_IRQHandler
<LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART2_IRQHandler
</UL>

<P><STRONG><a name="[8b]"></a>USART_Init</STRONG> (Thumb, 226 bytes, Stack size 72 bytes, at32f4xx_usart.o(i.USART_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = USART_Init &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GetClocksFreq
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Configuration
</UL>

<P><STRONG><a name="[91]"></a>USART_ReceiveData</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, at32f4xx_usart.o(i.USART_ReceiveData))
<BR><BR>[Called By]<UL><LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART3_IRQHandler
<LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART2_IRQHandler
</UL>

<P><STRONG><a name="[85]"></a>USART_SendData</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, at32f4xx_usart.o(i.USART_SendData))
<BR><BR>[Called By]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendData
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RS485Task_Function
</UL>

<P><STRONG><a name="[8a]"></a>USART_StructInit</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, at32f4xx_usart.o(i.USART_StructInit))
<BR><BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Configuration
</UL>

<P><STRONG><a name="[5]"></a>UsageFault_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, at32f4xx_it.o(i.UsageFault_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f413rx_hd.o(RESET)
</UL>
<P><STRONG><a name="[51]"></a>Voltage_Function</STRONG> (Thumb, 212 bytes, Stack size 40 bytes, main.o(i.Voltage_Function))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = Voltage_Function &rArr; vTaskDelay &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendData
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(i.main)
</UL>
<P><STRONG><a name="[bf]"></a>__scatterload_copy</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_copy), UNUSED)

<P><STRONG><a name="[c0]"></a>__scatterload_null</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_null), UNUSED)

<P><STRONG><a name="[c1]"></a>__scatterload_zeroinit</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_zeroinit), UNUSED)

<P><STRONG><a name="[49]"></a>main</STRONG> (Thumb, 198 bytes, Stack size 16 bytes, main.o(i.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = main &rArr; vTaskStartScheduler &rArr; xTaskCreate &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreate
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskStartScheduler
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Configuration
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_Configuration
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Configuration
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Configuration
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT32_Board_Init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> entry9a.o(.ARM.Collect$$$$0000000B)
</UL>
<P><STRONG><a name="[a4]"></a>pvPortMalloc</STRONG> (Thumb, 296 bytes, Stack size 24 bytes, heap_4.o(i.pvPortMalloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInsertBlockIntoFreeList
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvHeapInit
</UL>
<BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreate
</UL>

<P><STRONG><a name="[a2]"></a>pxPortInitialiseStack</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, port.o(i.pxPortInitialiseStack))
<BR><BR>[Called By]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseNewTask
</UL>

<P><STRONG><a name="[98]"></a>uxListRemove</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, list.o(i.uxListRemove))
<BR><BR>[Called By]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckTasksWaitingTermination
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddCurrentTaskToDelayedList
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskIncrementTick
</UL>

<P><STRONG><a name="[a3]"></a>vListInitialise</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, list.o(i.vListInitialise))
<BR><BR>[Called By]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseTaskLists
</UL>

<P><STRONG><a name="[a1]"></a>vListInitialiseItem</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, list.o(i.vListInitialiseItem))
<BR><BR>[Called By]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseNewTask
</UL>

<P><STRONG><a name="[9a]"></a>vListInsert</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, list.o(i.vListInsert))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = vListInsert
</UL>
<BR>[Called By]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddCurrentTaskToDelayedList
</UL>

<P><STRONG><a name="[99]"></a>vListInsertEnd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, list.o(i.vListInsertEnd))
<BR><BR>[Called By]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddNewTaskToReadyList
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddCurrentTaskToDelayedList
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskIncrementTick
</UL>

<P><STRONG><a name="[93]"></a>vPortEnterCritical</STRONG> (Thumb, 76 bytes, Stack size 0 bytes, port.o(i.vPortEnterCritical))
<BR><BR>[Called By]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckTasksWaitingTermination
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddNewTaskToReadyList
</UL>

<P><STRONG><a name="[95]"></a>vPortExitCritical</STRONG> (Thumb, 56 bytes, Stack size 0 bytes, port.o(i.vPortExitCritical))
<BR><BR>[Called By]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckTasksWaitingTermination
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddNewTaskToReadyList
</UL>

<P><STRONG><a name="[9f]"></a>vPortFree</STRONG> (Thumb, 140 bytes, Stack size 16 bytes, heap_4.o(i.vPortFree))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInsertBlockIntoFreeList
</UL>
<BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreate
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvDeleteTCB
</UL>

<P><STRONG><a name="[aa]"></a>vPortSetupTimerInterrupt</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, port.o(i.vPortSetupTimerInterrupt))
<BR><BR>[Called By]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xPortStartScheduler
</UL>

<P><STRONG><a name="[76]"></a>vTaskDelay</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, tasks.o(i.vTaskDelay))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = vTaskDelay &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddCurrentTaskToDelayedList
</UL>
<BR>[Called By]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Voltage_Function
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Status_Function
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RS485Task_Function
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RS232Task_Function
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Current_Function
</UL>

<P><STRONG><a name="[96]"></a>vTaskStartScheduler</STRONG> (Thumb, 108 bytes, Stack size 16 bytes, tasks.o(i.vTaskStartScheduler))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = vTaskStartScheduler &rArr; xTaskCreate &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreate
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xPortStartScheduler
</UL>
<BR>[Called By]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[a5]"></a>vTaskSuspendAll</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, tasks.o(i.vTaskSuspendAll))
<BR><BR>[Called By]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
</UL>

<P><STRONG><a name="[57]"></a>vTaskSwitchContext</STRONG> (Thumb, 118 bytes, Stack size 0 bytes, tasks.o(i.vTaskSwitchContext))
<BR><BR>[Called By]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>

<P><STRONG><a name="[a9]"></a>xPortStartScheduler</STRONG> (Thumb, 330 bytes, Stack size 16 bytes, port.o(i.xPortStartScheduler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = xPortStartScheduler
</UL>
<BR>[Calls]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortSetupTimerInterrupt
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___6_port_c_39a90d8d__prvEnableVFP
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___6_port_c_39a90d8d__prvStartFirstTask
</UL>
<BR>[Called By]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskStartScheduler
</UL>

<P><STRONG><a name="[94]"></a>xTaskCreate</STRONG> (Thumb, 96 bytes, Stack size 72 bytes, tasks.o(i.xTaskCreate))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = xTaskCreate &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseNewTask
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddNewTaskToReadyList
</UL>
<BR>[Called By]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskStartScheduler
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[87]"></a>xTaskIncrementTick</STRONG> (Thumb, 282 bytes, Stack size 24 bytes, tasks.o(i.xTaskIncrementTick))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvResetNextTaskUnblockTime
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
</UL>
<BR>[Called By]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>

<P><STRONG><a name="[a8]"></a>xTaskResumeAll</STRONG> (Thumb, 224 bytes, Stack size 16 bytes, tasks.o(i.xTaskResumeAll))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvResetNextTaskUnblockTime
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskIncrementTick
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
</UL>
<BR>[Called By]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
</UL>
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[88]"></a>SetSysClock</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, system_at32f4xx.o(i.SetSysClock))
<BR><BR>[Called By]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>

<P><STRONG><a name="[a6]"></a>prvHeapInit</STRONG> (Thumb, 98 bytes, Stack size 12 bytes, heap_4.o(i.prvHeapInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = prvHeapInit
</UL>
<BR>[Called By]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
</UL>

<P><STRONG><a name="[a7]"></a>prvInsertBlockIntoFreeList</STRONG> (Thumb, 96 bytes, Stack size 8 bytes, heap_4.o(i.prvInsertBlockIntoFreeList))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = prvInsertBlockIntoFreeList
</UL>
<BR>[Called By]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
</UL>

<P><STRONG><a name="[53]"></a>prvTaskExitError</STRONG> (Thumb, 60 bytes, Stack size 0 bytes, port.o(i.prvTaskExitError))
<BR>[Address Reference Count : 1]<UL><LI> port.o(i.pxPortInitialiseStack)
</UL>
<P><STRONG><a name="[97]"></a>prvAddCurrentTaskToDelayedList</STRONG> (Thumb, 124 bytes, Stack size 24 bytes, tasks.o(i.prvAddCurrentTaskToDelayedList))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsert
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
</UL>
<BR>[Called By]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
</UL>

<P><STRONG><a name="[9b]"></a>prvAddNewTaskToReadyList</STRONG> (Thumb, 150 bytes, Stack size 8 bytes, tasks.o(i.prvAddNewTaskToReadyList))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = prvAddNewTaskToReadyList &rArr; prvInitialiseTaskLists
</UL>
<BR>[Calls]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseTaskLists
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
</UL>
<BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreate
</UL>

<P><STRONG><a name="[9d]"></a>prvCheckTasksWaitingTermination</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, tasks.o(i.prvCheckTasksWaitingTermination))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = prvCheckTasksWaitingTermination &rArr; prvDeleteTCB &rArr; vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvDeleteTCB
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
</UL>
<BR>[Called By]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvIdleTask
</UL>

<P><STRONG><a name="[9e]"></a>prvDeleteTCB</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, tasks.o(i.prvDeleteTCB))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = prvDeleteTCB &rArr; vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
</UL>
<BR>[Called By]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckTasksWaitingTermination
</UL>

<P><STRONG><a name="[54]"></a>prvIdleTask</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, tasks.o(i.prvIdleTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = prvIdleTask &rArr; prvCheckTasksWaitingTermination &rArr; prvDeleteTCB &rArr; vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckTasksWaitingTermination
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tasks.o(i.vTaskStartScheduler)
</UL>
<P><STRONG><a name="[a0]"></a>prvInitialiseNewTask</STRONG> (Thumb, 164 bytes, Stack size 56 bytes, tasks.o(i.prvInitialiseNewTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = prvInitialiseNewTask
</UL>
<BR>[Calls]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pxPortInitialiseStack
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInitialiseItem
</UL>
<BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreate
</UL>

<P><STRONG><a name="[9c]"></a>prvInitialiseTaskLists</STRONG> (Thumb, 70 bytes, Stack size 8 bytes, tasks.o(i.prvInitialiseTaskLists))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = prvInitialiseTaskLists
</UL>
<BR>[Calls]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInitialise
</UL>
<BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddNewTaskToReadyList
</UL>

<P><STRONG><a name="[ad]"></a>prvResetNextTaskUnblockTime</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, tasks.o(i.prvResetNextTaskUnblockTime))
<BR><BR>[Called By]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskIncrementTick
</UL>
<P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
